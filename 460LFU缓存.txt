struct dataMem{
    int key;
    int value;
    int frequence;
    dataMem(int a,int b, int c):key(a),value(b),frequence(c){}
};

struct lessFreq{
    constexpr bool operator()(const dataMem* lhs, dataMem* rhs) const
    {
        return lhs->frequence < rhs->frequence;
    }
};

class LFUCache {
public:
    LFUCache(int capacity){
        for(int i = 0;i < capacity; ++ i){
            cache.push(move(new dataMem(0,0,0)));
        }
    }

    int get(int key) {

        auto it = data_pos.find(key);
        if(it != data_pos.end()){
            int value = it ->second->value;
            it -> second -> frequence += 1;
            return value;
        }else
            return -1;

    }

    void put(int key, int value) {

        auto it = data_pos.find(key);
        if(it != data_pos.end()){
            it -> second -> value = value;
            it -> second -> frequence ++;
        }else{
            data_pos.erase(cache.top() -> key);
            cache.pop();
            dataMem* t = new dataMem(key,value,1);
            cache.push(t);
            data_pos.insert(make_pair(key, t));
        }
        return;

    }

private:
    priority_queue<dataMem*, vector<dataMem*>, lessFreq> cache;
    unordered_map<int, dataMem*> data_pos;
};